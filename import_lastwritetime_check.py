#!/usr/bin/env python


from zen import ZenossAPI
from clint.textui import colored
import sys
import os
from subprocess import Popen, PIPE


def usage():
    print """
Usage: {0} /path/to/file

The file has this format:
CI_NUMBER;file_path;time diference;severity

The time diference is the maximum diference of time between
the current time and the file's timestamp.
The severity is the severity of the events generated by this
check.

Example of file content: 

CI00041958;C:\\CegekaUpdater\\Updater.log;8;4
""".format(sys.argv[0])


def check_if_dcip(z, uid):
    KDC = z.get_specific_zen_property(uid, 'zWinKDC', '')['result']['data'][0]['value']
    if KDC:
        print colored.green('INFO :'), 'The KDC is {}'.format(KDC)
        return True
    print colored.green('INFO :'), 'The KDC is empty'
    return False


def bind_template(z, uid, file_path, time_dif, severity):
    fp = file_path.replace(':', '').replace('.', '').replace('\\', '_').replace('__', '_')
    print colored.green('INFO :'), 'binding the LastWriteTime_check template'
    templates = [x[0] for x in z.get_bound_templates(uid=uid)]

    # Bind the LastWriteTime_check template
    if 'LastWriteTime_check' not in templates:
        t_name = 'LastWriteTime_check'
        templates.append(t_name)
        if z.set_bound_templates(uid, templates=templates)['result']['success']:
            print colored.green('INFO :'), "LastWriteTime_check template bound" 
        else:
            print colored.red('ERROR:'), 'Binding the template failed.'
    else:
        print colored.yellow('INFO :'), "LastWriteTime_check template already bound"

    print colored.green('INFO :'), "Making a local copy"

    # Create a local copy of the template
    if z.copy_template(uid=uid, template='/zport/dmd/Devices/rrdTemplates/LastWriteTime_check')['result']['success']:
        print colored.green('INFO :'), "Local copy created."
    else:
        print colored.red('ERROR:'), "Failed to create the local copy."

    # Add a datasource
    print colored.green('INFO :'), 'Creating the datasource check_%s' % fp
    if z.add_data_source(t_uid=uid + '/LastWriteTime_check', t_type='COMMAND', t_name="check_%s" % fp)['result']['success']:
        print colored.green('INFO :'), 'add data source ok' 
    else: 
        print colored.red('ERROR:'), 'add data source FAILED'

    # Modifying the datasource
    if check_if_dcip(z, uid):
        commandTemplate = "/opt/zenoss/scripts/checks/lastwritetime_check.py -r ${{dev/manageIp}} -u ${{dev/zWinRMUser}} \
-p ${{dev/zWinRMPassword}} -f '{file}' -t {time_dif} -s {severity} --dcip ${{dev/zWinKDC}}\
".format(file=file_path, time_dif=time_dif, severity=severity)
    else:
        commandTemplate = "/opt/zenoss/scripts/checks/lastwritetime_check.py -r ${{dev/manageIp}} -u ${{dev/zWinRMUser}} \
-p ${{dev/zWinRMPassword}} -f '{file}' -t {time_dif} -s {severity}\
".format(file=file_path, time_dif=time_dif, severity=severity)

    print colored.green('INFO :'), 'Updating the datasource'
    if z.set_template_info( data = {
        'commandTemplate': commandTemplate,
        'component': "check_%s" % fp,
        'cycletime': 300,
        'enabled': True,
        'eventClass': '/Cmd/Fail',
        'severity': severity,
        'parser': 'JSON',
        'uid': uid + '/LastWriteTime_check/datasources/check_%s' % fp
        })['result']['success']:
        print colored.green('INFO :'), 'The datasource was updated'
    else:
        print colored.red('ERROR:'), 'The datasource was not updated'


def main():
    z = ZenossAPI()
    if len(sys.argv) != 2 or sys.argv[1] == '-h':
        usage()
    else:
        text_file = sys.argv[1]
        #if not os.path.isfile(text_file):
        #    sys.exit("The file {} does not exist.".format(text_file))
        with open(text_file, 'r') as f:
            lines = f.readlines()
            for line in lines:
                line_content = line.split(';')
                if len(line_content) == 4:
                    CI = line.split(';')[0]
                    print colored.yellow('='*30)
                    print colored.yellow('Working on {}...'.format(CI))
                    file_path = line.split(';')[1]
                    time_dif = line.split(';')[2]
                    severity = int(line.split(';')[3].replace('\n', ''))
                    try:
                        deviceinfo = z.get_device(name=CI)
                        deviceClass = deviceinfo['deviceClass']
                        if 'Windows/Base' in deviceClass:
                            uid = deviceinfo['uid']
                            components = z.get_dev_components(uid)
                            for component in components['result']['data']:
                                if component['name'] == 'Cegeka.UpdaterService':
                                    bind_template(z, uid, file_path, time_dif, severity)
                                    break
                            else:
                                print colored.yellow('INFO :'), '{} does not have the Cegeka.UpdaterService service. \
        This CI will be skipped.'.format(CI)
                        else:
                            raise Exception('{} is not monitored through WinRM'.format(CI))
                    except Exception as e:
                        print colored.red('ERROR:'), 'Cannot apply the template on {}. {}'.format(CI, e)
                else:
                    print colored.red('ERROR:'), 'The line {} is not correct.'.format(line.replace('\n', ''))
                print colored.yellow('='*30)
                print '\n'


if __name__ == "__main__":
    main()
